const express = require("express");
const { Admin, Course } = require('../model/model');
const {adminMiddleware} = require('../middlewares/admin')
const zod = require('zod')


const usernameSchema = zod.string()
const passwordSchema = zod.string().min(6, 'password must be 6 char min').regex(/^[a-zA-Z0-9]+$/, "password must contain only alphaNumberic characters")
const titleSchema = zod.string()
const priceSchema = zod.number()
const descriptionSchema = zod.string()
const imgLinkSchema = zod.string().url();

//* This handles every endpoint hit after the "/admin" (eg /admin/signup)
const router = express.Router();

router.post("/signup" ,async (req, res) => {
  const { username, password } = req.body;

  try {
    const existingAdmin = await Admin.findOne({ username: username, password:password });
    if (existingAdmin) {
      return res.status(400).json({ message: "Admin already exists" });
    }

    Admin.create({username, password})
    .then(()=>{
      res.status(201).json({ message: "Admin created successfully" });      
    })
    .catch((err)=>{
      console.log(err.message)
      res.json({
        message:"unable to create Admin"
      })
    })
  } catch (error) {
    console.error("Error creating admin:", error);
    res.status(500).json({ message: "Internal server error" });
  }
});

/* - POST /admin/courses
  Description: Creates a new course.
  Input: Headers: { 'username': 'username', 'password': 'password' }, Body: { title: 'course title', description: 'course description', price: 100, imageLink: 'https://linktoimage.com' }
  Output: { message: 'Course created successfully', courseId: "new course id generated by mongoDB itself" }
  */


router.post("/courses", adminMiddleware, async (req, res) => {
  const {title, description, imageLink, price} = req.body;
   
  //if exist leave
  // const existingCourse =  
  // if(exisits) {}
  const course = Course.create({
    title,
    description,
    imageLink,
    price,
  }).then((course)=> console.log(course))
  
  res.status(201).json({message: "Course created succesfully",
    course_id: course._id
  })
});
/*
GET /admin/courses
  Description: Returns all the courses.
  Input: Headers: { 'username': 'username', 'password': 'password' }
  Output: { courses: [ { id: 1, title: 'course title', description: 'course description', price: 100, imageLink: 'https://linktoimage.com', published: true }, ... ] }
*/ 
router.get("/courses", adminMiddleware, (req, res) => {
  Course.find({}).then((items)=> res.json({Courses: items}))
});


module.exports = router